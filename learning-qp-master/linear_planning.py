import torch
from scipy.optimize import linprog
import numpy as np

'''
# 定义 H 和 b
H = torch.tensor([[-0.8258, -0.0102, -0.0000, -0.0000],
                  [-0.0051, -0.6246, -0.0000, -0.0000],
                  [-0.0000, -0.4683, -0.0000, -0.0000],
                  [-0.3070, -0.0000, -0.0000, -0.0000],
                  [-0.8126, -0.0298, -0.8258, -0.0102],
                  [-0.0151, -0.6177, -0.0051, -0.6246],
                  [-0.0000, -0.4484, -0.0000, -0.4683],
                  [-0.2970, -0.0000, -0.3070, -0.0000],
                  [ 0.8258,  0.0102,  0.0000,  0.0000],
                  [ 0.0051,  0.6246,  0.0000,  0.0000],
                  [ 0.0000,  0.4683,  0.0000,  0.0000],
                  [ 0.3070,  0.0000,  0.0000,  0.0000],
                  [ 0.8126,  0.0298,  0.8258,  0.0102],
                  [ 0.0151,  0.6177,  0.0051,  0.6246],
                  [ 0.0000,  0.4484,  0.0000,  0.4683],
                  [ 0.2970,  0.0000,  0.3070,  0.0000],
                  [-1.0000, -0.0000, -0.0000, -0.0000],
                  [-0.0000, -1.0000, -0.0000, -0.0000],
                  [-0.0000, -0.0000, -1.0000, -0.0000],
                  [-0.0000, -0.0000, -0.0000, -1.0000],
                  [ 1.0000,  0.0000,  0.0000,  0.0000],
                  [ 0.0000,  1.0000,  0.0000,  0.0000],
                  [ 0.0000,  0.0000,  1.0000,  0.0000],
                  [ 0.0000,  0.0000,  0.0000,  1.0000]], device='cuda:0')

b = torch.tensor([[14.2531,  4.2502,  6.4645, 18.2115, 13.7739,  4.3660,  7.0404, 18.2701,
                   5.7449, 15.7478, 13.5335,  1.7865,  6.2241, 15.6320, 12.9576,  1.7279,
                   0.0000,  0.0000,  0.0000,  0.0000,  8.0000,  8.0000,  8.0000,  8.0000]],
                 device='cuda:0')

# 将 H 和 b 转换为 CPU 和 numpy 数组
H = H.cpu().numpy()
b = b.cpu().numpy().flatten()

# 将不等式转化为标准形式 A x <= c
A = -H
c = b

# 使用线性规划求解可行域
result = linprog(c=np.zeros(4), A_ub=A, b_ub=c, bounds=(None, None))

# 输出结果
if result.success:
    print("可行解的范围为：")
    print(result.x)
else:
    print("没有找到可行解")
    
import torch
'''

# 定义 H 和 b
H = torch.tensor([[[-0.3325,  2.3814, -0.3990,  1.0669,  1.0000],
         [-1.2009,  3.3538, -2.0721,  0.0742,  1.0000],
         [-0.6007,  3.1400, -1.1665,  1.2686,  1.0000],
         [-0.2172,  2.8690, -0.6277,  1.7452,  1.0000],
         [-0.1728,  1.8317, -3.9059, -0.2060,  1.0000],
         [-0.7044, -0.3224, -0.5362, -2.9028,  1.0000],
         [-0.9618, -0.2953,  0.0808, -3.1649,  1.0000],
         [-1.6348,  2.9826, -2.2683, -1.2421,  1.0000],
         [ 0.3761, -0.7957, -0.5315, -1.2920,  1.0000],
         [-0.5896,  2.2938, -0.2078,  0.4069,  1.0000],
         [-1.5102,  1.7262,  1.0269, -0.2878,  1.0000],
         [-0.1371,  0.8116,  0.6735, -0.3764,  1.0000],
         [-0.2303,  0.6536,  0.9516, -0.6965,  1.0000],
         [-0.2200,  0.6624,  0.9229, -0.6747,  1.0000],
         [ 0.1553,  1.2058,  0.2312,  0.6507,  1.0000],
         [-0.4041,  0.1419, -3.2367, -1.8866,  1.0000],
         [ 0.4768, -1.5457,  0.2094, -1.8393,  1.0000],
         [-0.7060,  3.6499, -1.2777,  1.6804,  1.0000],
         [ 0.2355,  0.2349, -3.2933, -1.0629,  1.0000],
         [-0.7637,  1.9064, -3.6160, -1.2266,  1.0000],
         [-1.7651,  0.7980,  0.8537, -3.2557,  1.0000],
         [-1.5070,  1.2525,  0.6516, -1.0954,  1.0000],
         [ 0.0060, -1.8561,  0.2896, -3.2094,  1.0000],
         [ 0.1599,  0.3121, -0.6179, -0.6492,  1.0000],
         [-0.4655,  3.4750, -1.1824,  1.9181,  1.0000],
         [-1.0315,  3.2563, -3.8242, -0.1974,  1.0000],
         [-0.4377, -0.2574, -0.2755, -2.1793,  1.0000],
         [-0.4080,  0.6244, -3.7736, -1.6979,  1.0000],
         [-1.1875,  3.4297,  0.0086,  0.3307,  1.0000],
         [-0.4932,  2.0894,  0.1507,  0.4161,  1.0000],
         [ 0.0000,  0.0000,  0.0000,  0.0000,  1.0000]]], device='cuda:0')

b = torch.tensor([[ 22.7906, -22.2197,  -7.6467,  27.8491,  32.6169,   6.4014, -12.5474,
          -3.9420,  17.8911,  -9.6213,  28.1120,  11.5298,  12.5685,  12.4370,
           5.4271, -58.4826,  43.9484,  24.3436,  19.4929,  13.4744, -42.8695,
         -26.0789,  11.4214,  14.5985,   8.3701,   9.2256, -10.2844,  33.5245,
         -25.3994,  -9.0650,   0.0000]], device='cuda:0')

# 假设有一个解 x
x = torch.tensor([[  5.8215,  14.7843, -14.0940, -24.8016,   0.1159]], device='cuda:0')

# 计算 Hx + b
Hx_plus_b = torch.matmul(H, x.T) + b.squeeze()

# 检查是否所有元素都大于或等于 0
is_feasible = torch.all(Hx_plus_b >= 0).item()

# 输出结果
if is_feasible:
    print("x 是一个可行解")
else:
    print("x 不是一个可行解")
    print("不满足约束的索引和值：")
    # for i, value in enumerate(Hx_plus_b):
    #     if value < 0:
    #         print(f"约束 {i}: {value.item()}")