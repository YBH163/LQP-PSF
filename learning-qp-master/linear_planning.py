import torch
from scipy.optimize import linprog
import numpy as np

'''
# 定义 H 和 b
H = torch.tensor([[-0.8258, -0.0102, -0.0000, -0.0000],
                  [-0.0051, -0.6246, -0.0000, -0.0000],
                  [-0.0000, -0.4683, -0.0000, -0.0000],
                  [-0.3070, -0.0000, -0.0000, -0.0000],
                  [-0.8126, -0.0298, -0.8258, -0.0102],
                  [-0.0151, -0.6177, -0.0051, -0.6246],
                  [-0.0000, -0.4484, -0.0000, -0.4683],
                  [-0.2970, -0.0000, -0.3070, -0.0000],
                  [ 0.8258,  0.0102,  0.0000,  0.0000],
                  [ 0.0051,  0.6246,  0.0000,  0.0000],
                  [ 0.0000,  0.4683,  0.0000,  0.0000],
                  [ 0.3070,  0.0000,  0.0000,  0.0000],
                  [ 0.8126,  0.0298,  0.8258,  0.0102],
                  [ 0.0151,  0.6177,  0.0051,  0.6246],
                  [ 0.0000,  0.4484,  0.0000,  0.4683],
                  [ 0.2970,  0.0000,  0.3070,  0.0000],
                  [-1.0000, -0.0000, -0.0000, -0.0000],
                  [-0.0000, -1.0000, -0.0000, -0.0000],
                  [-0.0000, -0.0000, -1.0000, -0.0000],
                  [-0.0000, -0.0000, -0.0000, -1.0000],
                  [ 1.0000,  0.0000,  0.0000,  0.0000],
                  [ 0.0000,  1.0000,  0.0000,  0.0000],
                  [ 0.0000,  0.0000,  1.0000,  0.0000],
                  [ 0.0000,  0.0000,  0.0000,  1.0000]], device='cuda:0')

b = torch.tensor([[14.2531,  4.2502,  6.4645, 18.2115, 13.7739,  4.3660,  7.0404, 18.2701,
                   5.7449, 15.7478, 13.5335,  1.7865,  6.2241, 15.6320, 12.9576,  1.7279,
                   0.0000,  0.0000,  0.0000,  0.0000,  8.0000,  8.0000,  8.0000,  8.0000]],
                 device='cuda:0')

# 将 H 和 b 转换为 CPU 和 numpy 数组
H = H.cpu().numpy()
b = b.cpu().numpy().flatten()

# 将不等式转化为标准形式 A x <= c
A = -H
c = b

# 使用线性规划求解可行域
result = linprog(c=np.zeros(4), A_ub=A, b_ub=c, bounds=(None, None))

# 输出结果
if result.success:
    print("可行解的范围为：")
    print(result.x)
else:
    print("没有找到可行解")
    
import torch
'''

# 定义 H 和 b
H = torch.tensor([[-0.8258, -0.0102, -0.0000, -0.0000],
                  [-0.0051, -0.6246, -0.0000, -0.0000],
                  [-0.0000, -0.4683, -0.0000, -0.0000],
                  [-0.3070, -0.0000, -0.0000, -0.0000],
                  [-0.8126, -0.0298, -0.8258, -0.0102],
                  [-0.0151, -0.6177, -0.0051, -0.6246],
                  [-0.0000, -0.4484, -0.0000, -0.4683],
                  [-0.2970, -0.0000, -0.3070, -0.0000],
                  [ 0.8258,  0.0102,  0.0000,  0.0000],
                  [ 0.0051,  0.6246,  0.0000,  0.0000],
                  [ 0.0000,  0.4683,  0.0000,  0.0000],
                  [ 0.3070,  0.0000,  0.0000,  0.0000],
                  [ 0.8126,  0.0298,  0.8258,  0.0102],
                  [ 0.0151,  0.6177,  0.0051,  0.6246],
                  [ 0.0000,  0.4484,  0.0000,  0.4683],
                  [ 0.2970,  0.0000,  0.3070,  0.0000],
                  [-1.0000, -0.0000, -0.0000, -0.0000],
                  [-0.0000, -1.0000, -0.0000, -0.0000],
                  [-0.0000, -0.0000, -1.0000, -0.0000],
                  [-0.0000, -0.0000, -0.0000, -1.0000],
                  [ 1.0000,  0.0000,  0.0000,  0.0000],
                  [ 0.0000,  1.0000,  0.0000,  0.0000],
                  [ 0.0000,  0.0000,  1.0000,  0.0000],
                  [ 0.0000,  0.0000,  0.0000,  1.0000]], device='cuda:0')

b = torch.tensor([[14.2531,  4.2502,  6.4645, 18.2115, 13.7739,  4.3660,  7.0404, 18.2701,
                   5.7449, 15.7478, 13.5335,  1.7865,  6.2241, 15.6320, 12.9576,  1.7279,
                   0.0000,  0.0000,  0.0000,  0.0000,  8.0000,  8.0000,  8.0000,  8.0000]],
                 device='cuda:0')

# 假设有一个解 x
x = torch.tensor([[ 3.0208e-16, -1.5063e-11, -3.0177e-07, -1.8227e-08]], device='cuda:0')

# 计算 Hx + b
Hx_plus_b = torch.matmul(H, x.T) + b.squeeze()

# 检查是否所有元素都大于或等于 0
is_feasible = torch.all(Hx_plus_b >= 0).item()

# 输出结果
if is_feasible:
    print("x 是一个可行解")
else:
    print("x 不是一个可行解")
    print("不满足约束的索引和值：")
    # for i, value in enumerate(Hx_plus_b):
    #     if value < 0:
    #         print(f"约束 {i}: {value.item()}")